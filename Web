웹 기초
============  프론트 엔드  ============    
    
    Hyper Text Markup Language (HTML)
        - 웹 문서의 뼈와 살을 담당, 태그와 속성을 통한 구조화된 문서 작성을 지원한다.
    Cascading Style Sheets (CSS)
        - 웹 문서의 생김새를 지정, 웹 리소스들의 시각화 방법을 기재한 스타일 시트이다. 
          글자의 색깔이나 모양, 배경 색상, 이미지의 크기나 위치 등을 CSS로 지정가능하고, 브라우저는 이를 참고하여 웹 문서를 시각화한다.
    JavaScript (JS)
        - 웹 문서의 동작을 정의 이용자가 버튼을 클릭했을 때, 어떻게 반응할지, 
          이용자가 데이터를 입력하면 어디로 전송할지 등을 JS로 구현할 수 있다. 
          JS는 이용자의 브라우저에서 실행되는데, 클라이언트가 실행하는 코드라고 하여 Client-Side Script라고도 부른다.
    
    표준 통신 프로토콜에는 네트워크 통신의 기초가 되는 TCP/IP, 웹 애플리케이션이 사용하는 HTTP, 파일을 주고받을 때 사용하는 FTP 등이 있음
    
    HTTP(Hyper Text Transfer Protocol)**란 서버와 클라이언트의 데이터 교환을 요청(Request)과 응답(Response) 형식으로 정의한 프로토콜이다.
    
    기본 매커니즘으로 클라이언트가 서버에 요청 서버가 응답한다.
    
    웹 서버는 HTTP 서비스 포트(80 , 8080)에 HTTP 서버를 대기시키고 클라이언트가 포트에 HTTP 요청을 전송하면 이를 해석하여 서버는 응답한다.
    
    포트 중 0~1023번 은 Well-Known Port 또는 Privileged Port 라고 함.     Port 22 - SSH , Port 80 - HTTP , Port 443 - HTTPS
    이 대역의 포트에 서비스를 실행하려면 관리자 권한이 필요하여 클라이언트는 이 포트들에서 실행 중인 서비스들을 관리자의 것으로 신뢰함.
    
    HTTP 요청과 응답은 크게 HTTP 헤드와 바디로 구성됨
    
    HTTP 헤드 - 각 줄은 CRLF(커서를 현재 줄의 맨 앞으로 이동시키는 CR , 커서를 다음 줄로 이동시키는 LF)로 구분되며 첫 줄은 Start-Line , 나머지 줄은 Header라고 부른다.
    
    HTTP 바디 - 헤드의 끝을 나타내는 한 줄의 CRLF 뒤, 모든 줄이다. 클라이언트나 서버에게 전송하려는 모든 데이터가 담긴다.
    
============  HTTP 요청, 응답  ============
    
      
    [시작 줄]
    
    HTTP 요청의 시작 줄은 메소드(Method), 요청 URI(Request-URI), 그리고 HTTP 버전으로 구성됩니다. 각각은 띄어쓰기로 구분합니다.
    (요청 URI ⇒ Method의 대상)
    
    먼저 GET은 리소스를 가져오라는 메소드이고 이용자가 브라우저에 웹 서버의 주소를 입력하거나 하이퍼링크를 클릭하면, 
    새로운 페이지를 렌더링하기 위해 리소스가 필요하다. 이때 브라우저는 GET 요청을 서버에 전송하여 리소스를 받아온다. 
    반대로, POST는 리소스로 데이터를 보내라는 메소드이다. 전송할 데이터는 보통 HTTP 바디에 포함됩니다. 
    로그인할 때 입력하는 ID와 비밀번호, 게시판에 작성하는 글 등이 POST로 서버에 보내진다.**
    
    --HTTP 응답--
    
    [시작 줄]
    
    HTTP 응답의 시작 줄은 HTTP 버전, 상태 코드, 처리 사유로 구성됨
    
    상태 코드 — HTTP 표준 RFC 2616은 약 40개 상태 코드 정의
    
    첫 번째 자릿수에 따라 5개의 클래스로 분류됨.
    
    
  |상태코드|
  |  1xx  | 요청을 제대로 받았고, 처리가 진행 중임 
  |  2xx  | 요청이 제대로 처리됨 | • 200(OK): 성공
  |  3xx  | 요청을 처리하려면, 클라이언트가 추가 동작을 취해야 함. • 302(Found): 다른 URL로 갈 것 
  |  4xx  | 클라이언트가 잘못된 요청을 보내어 처리에 실패했습니다. 
    • 400(Bad Request): 요청이 문법에 맞지 않음
    • 401(Unauthorized): 클라이언트가 요청한 리소스에 대한 인증이 실패함
    • 403(Forbidden): 클라이언트가 리소스에 요청할 권한이 없음
    • 404(Not Found): 리소스가 없음 
  |  5xx  | 클라이언트의 요청은 유효하지만, 서버에 에러가 발생하여 처리에 실패했습니다. 
    • 500(Internal Server Error): 서버가 요청을 처리하다가 에러가 발생함
    • 503(Service Unavailable): 서버가 과부하로 인해 요청을 처리할 수 없음 
    
    
    
    시작 줄을 제외한 헤더와 바디는 HTTP 메시지와 동일
    
    --HTTPS--
    
    POST 요청으로 로그인 할 때 ID와 비밀번호가 포함되는데 공격자가 이를 가로챌 수 있음.
    
    이 문제점을 보완한 HTTPS는 TLS ( Transport Layer Security ) 프로토콜을 도입하였음. TLS는 서버와 클라이언트 사이에 오가는 모든 HTTP 메시지를 암호화한다.
    
  {TLS를 잘 이해하려면 TLS의 기반이 되는 공개 키 암호 시스템(Public Key Crypto Standard, PKCS) 및 대칭 키 암호(Symmetric Key Cryptography)을 알아야 합니다. 
    드림핵의 [암호 기초 로드맵](https://dreamhack.io/lecture/roadmaps/3)에서 이를 공부하고, 
    표준 [RFC 문서](https://www.rfc-editor.org/rfc/rfc5246.html)를 읽으면 이해에 도움이 될 것입니다.}
    
    -요약-
    
    - HTTP(HyperText Transfer Protocol): 웹 서버와 클라이언트가 리소스를 교환하기 위해 사용하는 프로토콜. 클라이언트가 요청하면, 서버가 응답하는 방식.
    - HTTP 메시지**: HTTP 서버와 클라이언트가 교환하는 데이터. 헤드와 바디로 구성되며, 각 줄은 CRLF로 구분됨.
        - 헤드: 메시지에 대한 정보. 헤드의 끝에는 CRLF가 한 줄 있음.
        - 바디: 클라이언트가 서버에게, 또는 서버가 클라이언트에게 전달할 데이터
    - HTTP 요청(Request): 클라이언트가 서버에게 특정 동작을 요청하는 메시지
        - 메소드(Method): 요청 URI가 가리키는 리소스에 대해, 서버가 수행했으면 하는 동작을 지정
        - 요청 URI(Request-URI): 메소드의 대상이 되는 리소스를 지정
    - HTTP 응답(Response): 요청을 처리한 결과 및 이유, 그리고 클라이언트에 전송할 웹 리소스를 포함하는 메시지
        - 상태 코드(Status Code): 요청을 처리한 결과
        - 처리 사유(Reason Phrase): 상태 코드가 발생한 이유
    - HTTPS(HTTP on Secure socket layer): TLS를 이용하여 HTTP의 약점을 보완한 프로토콜
                
    
    -웹 브라우저-
    
    주소창에 `dreamhack.io`를 입력하면 ?
    
    1. 웹 브라우저의 주소창에 입력된 주소를 해석 (URL 분석)
    2. `dreamhack.io`에 해당하는 주소 탐색 (DNS 요청) 
    3. HTTP를 통해 `dreamhack.io`에 요청
    4. `dreamhack.io`의 HTTP 응답 수신
    5. 리소스 다운로드 및 웹 렌더링 (HTML, CSS, Javascript)
    
    브라우저는 보안과 개발에 필요한 다양한 도구들도 제공한다.
    
    HTTPS의 적용 여부 및 서버 인증서의 안정성 여부 식별
    
    URL(Uniform Resource Locator)은 웹에 있는 리소스의 위치를 표현하는 문자열이다. 
    브라우저로 웹 리소스에 접근할 때 URL을 사용하여 서버에 요청한다. URL은 Scheme, Authority (Userinfo, Host, Port), Path, Query, Fragment 등으로 구성된다.

    Scheme://authority/path/path?query#fragment
    
    | Scheme | 웹 서버와 어떤 프로토콜로 통신할지 나타낸다. |
    | Host | Authority의 일부로, 접속할 웹 서버의 주소에 대한 정보를 가지고 있다. |
    | Port | Authority의 일부로, 접속할 웹 서버의 포트에 대한 정보를 가지고 있다. |
    | Path | 접근할 웹 서버의 리소스 경로로 '/'로 구분된다. |
    | Query | 웹 서버에 전달하는 파라미터이며 URL에서 '?' 뒤에 위치한다. |
    | Fragment | 메인 리소스에 존재하는 서브 리소스를 접근할 때 이를 식별하기 위한 정보를 담고 있다. '#' 문자 뒤에 위치한다. |
    
    URL에 대한 자세한 정보→ RFC 3986
    
    ============  DNS(Domain Name Server)  ============
    
    - Domain을 IP Address로 변환해주는 서버
    
    URL의 구성 요소 중 Host는 접속할 웹 서버의 주소를 나타낸다.  Domain Name, IP Address가 Host가 될 수 있으며 IP Address는 외우기 어려워 일반적으로는 도메인의 특성을 이름을 정의하여 사용한다.
    
    이 Domain Name을 Host 값으로 이용할 때 브라우저는 DNS에 Domain Name을 질의하고, DNS가 응답한 IP Address를 사용한다. 
    
    { Linux → nslookup 명령어로 Domain Name에 대한 정보 확인 가능 }
    
    --웹 렌더링(Web Rendering)--
    
    -서버로부터 받은 리소스를 이용자에게 시각화하는 행위
    
    브라우저는 서버로부터 HTML이랑 CSS를 받으면 HTML을 파싱하고 CSS를 적용하여 이용자에게 보여준다.
    
    ============  개발자 도구  ============
                
    요소 검사(Inspect) 및 디바이스 툴바(Device Toolbar)
    • Elements: 페이지를 구성하는 HTML 검사
    • Console: 자바 스크립트를 실행하고 결과를 확인할 수 있음
    • Sources: HTML, CSS, JS 등 페이지를 구성하는 리소스를 확인하고 디버깅할 수 있음
    • Network: 서버와 오가는 데이터를 확인할 수 있음
    • Application: 쿠키를 포함하여 웹 어플리케이션과 관련된 데이터를 확인할 수 있음
      
    **요소 검사** 특정 요소의 개괄적인 정보를 파악하고, 이와 관련된 코드 쉽게 찾을 수 있다.
    
    **디바이스 툴바** 현재 브라우저의 화면 비율 및 User-Agent를 원하는 값으로 변경 가능
    
    **Elements** HTML코드를 읽을 수 있고, 수정할 수 있다.
    
    **Console** 자바스크립트 코드에서 발생한 각종 메세지 출력 및 이용자가 입력한 자바스크립트 코드 실행 도구
    
    💡 단축키
    | Windows/Linux = Ctrl + Shift + J |
    | macOS = Option(⌥) +Cmd(⌘) + J |
    
    // "hello" 문자열을 출력하는 alert 함수를 실행합니다.
    alert("hello");
    // prompt는 popup box로 이용자 입력을 받는 함수입니다.
    // 이용자가 입력한 데이터는 return value로 설정됩니다.
    var value = prompt('input')
    // confirm 는 확인/취소(yes/no)를 확인하는 이용자로부터 입력 받는 함수입니다.
    // 이용자의 선택에 따라 Boolean(true/false)타입의 return value를 가집니다.
    var true_false = confirm('yes or no ?');
    // document.body를 변경합니다.
    document.body.innerHTML = '<h1>Refresh!</h1>';
    // document.body에 새로운 html 코드를 추가합니다.
    document.body.innerHTML += '<h1>HI!</h1>';
    
    --Sources--
    페이지를 구성하는 웹 리소스 확인
  
    🔴 현재 페이지의 리소스 파일 트리, 파일 시스템
    
    🟠 선택한 리소스 상세 보기
    
    🟢 디버깅 정보
    
    - Watch: 원하는 자바스크립트 식을 입력하면, 코드 실행 과정에서 해당 식의 값 변화를 확인할 수 있다.
    - Call Stack: 함수들의 호출 순서를 스택 형태로 보여준다. 예를 들어, `A → B → C` 순서로 함수가 호출되어 
      현재 `C` 내부의 코드를 실행하고 있다면, Call Stack의 가장 위에는 `C`, 가장 아래에는 `A`가 위치한다.
    - Scope: 정의된 모든 변수들의 값을 확인할 수 있다.
    - Breakpoints: 브레이크포인트들을 확인하고, 각각을 활성화 또는 비활성화할 수 있다.
      Source에서 중단점을 사용하여 자바스크립트 디버깅
    
    --Network--
    
    서버와 오가는 데이터를 확인할 수 있다.
        
    🔴 로깅 중지 및 로그 전체 삭제
       
    🟠 로그 필터링 및 검색
  
    🟢 옵션
    
    - Preserve log: 새로운 페이지로 이동해도 로그를 삭제하지 않는다.
    - Disable cache: 이미 캐시된 리소스도 서버에 요청한다.
    
    🟡 네트워크 로그
    
    🔵 네트워크 로그 요약 정보
    
    로그는 복사가 가능하고 HTTP Request를 복사하여 Console에 붙여넣으면 동일한 요청을 서버에 전송할 수 있다.
    
    --Application--
    
    쿠키, 캐시, 이미지, 폰트, 스타일시트 등 웹 애플리케이션과 관련된 리소스를 조회할 수 있다.
        
    Cookies에서는 브라우저에 저장된 쿠키 정보를 확인하고, 수정할 수 있다.
